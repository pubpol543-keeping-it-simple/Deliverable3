#load libraries
library(tidyverse)
#load data from local and create tabular data frame
df_educators <- read_csv("Data/Teacher_Data.csv")
#load libraries
library(tidyverse)
#load data from local and create tabular data frame
df_educators <- read_csv("Data/Finaldatafile.csv")
View(df_educators)
#explore data
str(finaldata)
#load data
finaldata <- read_csv("Data/Finaldatafile.csv")
#explore data
str(finaldata)
df_educators <-
df_countyfips <-
```
#load data
finaldata <- read_csv("Data/Finaldatafile.csv")
#load libraries
library(tidyverse)
#load data
finaldata <- read_csv("Data/Finaldatafile.csv")
#explore data
str(finaldata)
library(ggmap)
library(maps)
install.packages("ggmap")
install.packages("maps")
library(maps)
install.packages("mapdata")
library(ggmap)
install.packages(c("colorspace", "curl", "data.table", "dbplyr", "dplyr", "evaluate", "fansi", "forcats", "fs", "gargle", "ggplot2", "knitr", "lubridate", "markdown", "openxlsx", "purrr", "Rcpp", "readr", "readxl", "rmarkdown", "sass", "stringi", "tidyr", "timechange", "tinytex", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("colorspace", "curl", "data.table", "dbplyr", "dplyr", "evaluate", "fansi", "forcats", "fs", "gargle", "ggplot2", "knitr", "lubridate", "markdown", "openxlsx", "purrr", "Rcpp", "readr", "readxl", "rmarkdown", "sass", "stringi", "tidyr", "timechange", "tinytex", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("colorspace", "curl", "data.table", "dbplyr", "dplyr", "evaluate", "fansi", "forcats", "fs", "gargle", "ggplot2", "knitr", "lubridate", "markdown", "openxlsx", "purrr", "Rcpp", "readr", "readxl", "rmarkdown", "sass", "stringi", "tidyr", "timechange", "tinytex", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("colorspace", "curl", "data.table", "dbplyr", "dplyr", "evaluate", "fansi", "forcats", "fs", "gargle", "ggplot2", "knitr", "lubridate", "markdown", "openxlsx", "purrr", "Rcpp", "readr", "readxl", "rmarkdown", "sass", "stringi", "tidyr", "timechange", "tinytex", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("colorspace", "curl", "data.table", "dbplyr", "dplyr", "evaluate", "fansi", "forcats", "fs", "gargle", "ggplot2", "knitr", "lubridate", "markdown", "openxlsx", "purrr", "Rcpp", "readr", "readxl", "rmarkdown", "sass", "stringi", "tidyr", "timechange", "tinytex", "utf8", "vctrs", "vroom", "xfun", "yaml"))
detach("package:base", unload = TRUE)
detach("package:datasets", unload = TRUE)
detach("package:graphics", unload = TRUE)
detach("package:grDevices", unload = TRUE)
detach("package:methods", unload = TRUE)
detach("package:stats", unload = TRUE)
detach("package:utils", unload = TRUE)
install.packages(c("colorspace", "curl", "data.table", "dbplyr", "dplyr", "evaluate", "fansi", "forcats", "fs", "gargle", "ggplot2", "knitr", "lubridate", "markdown", "openxlsx", "purrr", "Rcpp", "readr", "readxl", "rmarkdown", "sass", "stringi", "tidyr", "timechange", "tinytex", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("colorspace", "curl", "data.table", "dbplyr", "dplyr", "evaluate", "fansi", "forcats", "fs", "gargle", "ggplot2", "knitr", "lubridate", "markdown", "openxlsx", "purrr", "Rcpp", "readr", "readxl", "rmarkdown", "sass", "stringi", "tidyr", "timechange", "tinytex", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("colorspace", "curl", "data.table", "dbplyr", "dplyr", "evaluate", "fansi", "forcats", "fs", "gargle", "ggplot2", "knitr", "lubridate", "markdown", "openxlsx", "purrr", "Rcpp", "readr", "readxl", "rmarkdown", "sass", "stringi", "tidyr", "timechange", "tinytex", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("colorspace", "curl", "data.table", "dbplyr", "dplyr", "evaluate", "fansi", "forcats", "fs", "gargle", "ggplot2", "knitr", "lubridate", "markdown", "openxlsx", "purrr", "Rcpp", "readr", "readxl", "rmarkdown", "sass", "stringi", "tidyr", "timechange", "tinytex", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("colorspace", "curl", "data.table", "dbplyr", "dplyr", "evaluate", "fansi", "forcats", "fs", "gargle", "ggplot2", "knitr", "lubridate", "markdown", "openxlsx", "purrr", "Rcpp", "readr", "readxl", "rmarkdown", "sass", "stringi", "tidyr", "timechange", "tinytex", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages("ggmap")
install.packages(c("colorspace", "curl", "data.table", "dbplyr", "dplyr", "evaluate", "fansi", "forcats", "fs", "gargle", "ggplot2", "knitr", "lubridate", "markdown", "openxlsx", "purrr", "Rcpp", "readr", "readxl", "rmarkdown", "sass", "stringi", "tidyr", "timechange", "tinytex", "utf8", "vctrs", "vroom", "xfun", "yaml"))
install.packages("ggmap")
#load libraries
library(tidyverse)
#load data
finaldata <- read_csv("Data/Finaldatafile.csv")
#explore data
str(finaldata)
test <- map_data("Washington")
?linkMap
#load libraries
library(tidyverse)
#load libraries
library(tidyverse)
library(sf)
install.packages("sf")
install.packages("ggmap")
install.packages("ggmap")
install.packages("maps")
#load libraries
library(tidyverse)
#load libraries
library(tidyverse)
library(maps)
install.packages("sf")
install.packages("mapdata")
library(ggmap)
library(maps)
library(mapdata)
map_data(Washington)
?map_data
#make map
states <- map_data("state")
View(states)
dim(states)
WA <- subset(states, region %in% c("Washington"))
ggplot(data = WA) +
geom_polygon(aes(x = long, y = lat), fill = "palegreen", color = "black")
base <- ggplot(data = WA) +
geom_polygon(aes(x = long, y = lat), fill = "palegreen", color = "black")
base
View(base)
WA <- subset(states, region =="Washington")
base <- ggplot(data = WA) +
geom_polygon(aes(x = long, y = lat), fill = "palegreen", color = "black")
base
View(base)
View(finaldata)
View(states)
counties <- map_data("county")
WA <- subset(states, region =="washington")
counties <- map_data("county")
WA_county <- subset(counties, region == "washington")
base <- ggplot(data = WA) +
geom_polygon(aes(x = long, y = lat), fill = "palegreen", color = "black")
base
WA_base <- ggplot(data = wa_df, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "gray")
WA_base <- ggplot(data = WA, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "gray")
WA_base + theme_nothing()
WA_base <- ggplot(data = WA, mapping = aes(x = long, y = lat, group = group)) + coord_fixed(1.3) + geom_polygon(color = "black", fill = "gray")
WA_base + theme_nothing()
WA_base + theme_nothing() +
geom_polygon(data = WA_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA)  # get the state border back on top
linkMap="https://github.com/EvansDataScience/VAforPM_Spatial/raw/main/worldMap.geojson"
head(mapWorld)
mapWorld=read_sf(linkMap)
library(sf)
mapWorld=read_sf(linkMap)
mapWorld=read_sf(linkMap)
head(mapWorld)
map_indexes=merge(mapWorld, #map first
finaldata,
by='ISO3')
head(mapWorld)
View(finaldata)
View(mapWorld)
WAbase <- subset(mapWorld, region == "United States")
WAbase <- subset(mapWorld, name == "United States")
WAbase <- subset(mapWorld, NAME == "United States")
WAbase
View(WAbase)
library(dplyr)
View(WA_base)
WA_counties_data <- inner_join(WA_county, finaldata$DemographicCategory, by = "county")
View(WA_county)
WA_counties_data <- inner_join(WA_county$subregion, finaldata$DemographicCategory, by = "county")
WA_counties_data <- inner_join(WA_county, finaldata$DemographicCategory, by = "subregion")
#load libraries
library(tidyverse)
library(dplyr)
library(sf)
#load data
finaldata <- read_csv("Data/Finaldatafile.csv")
#explore data
str(finaldata)
#make Washington base map
states <- map_data("state")
WA <- subset(states, region =="washington")
WA_base <- ggplot(data = WA, mapping = aes(x = long, y = lat, group = group)) + coord_fixed(1.3) + geom_polygon(color = "black", fill = "gray")
WA_base + theme_nothing()
library(maps)
WA_base + theme_nothing()
library(ggmap)
WA_base + theme_nothing()
#add Washington counties
counties <- map_data("county")
WA_county <- subset(counties, region == "washington")
WA_base + theme_nothing() +
geom_polygon(data = WA_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA)  # get the state border back on top
WA_counties_data <- inner_join(WA_county, finaldata$DemographicCategory, by = "subregion")
head(WA_base)
#find map
linkMap = "https://www2.census.gov/geo/pvs/bas/bas23maps/st53_wa/cou/"
mapWorld = read_sf(linkMap)
install.packages(rgdal)
install.packages(spdplyr)
install.packages(geojsonio)
install.packages(rmapshaper)
install.packages(c("rgdal", "spdplyr", "geojsonio", "rmapshaper"))
library(rgdal)
library(spdplyr)
library(geojsonio)
library(rmapshaper)
#load map
countymap <- readOGR(dsn = "Data\tl_rd22_09_county_new"),
#load map
countymap <- readOGR(dsn = "Data\tl_rd22_09_county_new",
layer = "tl_rd22_09_county_new", verbose = FALSE)
#load map
countymap <- readOGR(dsn = "Data\tl_rd22_09_county_new")
#load map
countymap <- readOGR(dsn = "Data\tl_rd22_09_county_new.shp",
layer = "tl_rd22_09_county_new.shp", verbose = FALSE)
#load map
countymap <- readOGR(dsn = "Data\tl_rd22_09_county_new\tl_rd22_09_county_new.shp",
layer = "tl_rd22_09_county_new\tl_rd22_09_county_new.shp", verbose = FALSE)
library(sf)
#load map
countymap <- readOGR(dsn = "Data\tl_rd22_09_county_new\tl_rd22_09_county_new.shp",
layer = "tl_rd22_09_county_new\tl_rd22_09_county_new.shp", verbose = FALSE)
#load map
countymap <- readOGR(dsn = "Data\tl_rd22_09_county_new\tl_rd22_09_county_new.shp",verbose = FALSE)
#load map
countymap <- readOGR(dsn = "/Data/tl_rd22_09_county_new/tl_rd22_09_county_new.shp",verbose = FALSE)
#load map
countymap <- readOGR(dsn = "Data/tl_rd22_09_county_new/tl_rd22_09_county_new.shp",verbose = FALSE)
#load map
countymap <- readOGR(dsn = "Data/tl_rd22_09_county_new/tl_rd22_09_county_new.shp", layer = "Data/tl_rd22_09_county_new/tl_rd22_09_county_new.shp", verbose = FALSE)
#load map
countymap <- readOGR(dsn = "Data/cb_2021_us_county_500k", layer = "Data/cb_2021_us_county_500k", verbose = FALSE)
#load map
countymap <- readOGR(dsn = "Data/cb_2021_us_county_500k/cb_2021_us_county_500k.shp", layer = "Data/cb_2021_us_county_500k/cb_2021_us_county_500k.shp", verbose = FALSE)
#load map
countymap <- readOGR(dsn = "Data/cb_2021_us_county_500k/cb_2021_us_county_500k.shp"), layer = "Data/cb_2021_us_county_500k/cb_2021_us_county_500k.shp", verbose = FALSE)
#load map
countymap <- readOGR(dsn = "Data/cb_2021_us_county_500k/cb_2021_us_county_500k", layer = "Data/cb_2021_us_county_500k/cb_2021_us_county_500k", verbose = FALSE)
#load map
countymap <- readOGR(dsn = "Data/cb_2021_us_county_500k/cb_2021_us_county_500k", layer = "Data/cb_2021_us_county_500k/cb_2021_us_county_500k")
#load map
countymap <- readOGR(dsn = "Data/cb_2021_us_county_500k/cb_2021_us_county_500k", layer = "cb_2021_us_county_500k", verbose = FALSE)
#load map
countymap <- readOGR(dsn = "Data/cb_2021_us_county_500k", layer = "cb_2021_us_county_500k", verbose = FALSE)
#load map
countymap <- readOGR(dsn = "Data/cb_2021_us_county_500k", verbose = FALSE)
#load map
countymap <- readOGR(dsn = "Data/cb_2021_us_county_500k")
ogrListLayers(dsn = dsn)
ogrListLayers(dsn = dsn)
?ogrListLayers
?readOGR
#load map
countymap <- readOGR("Data/cb_2021_us_county_500k","cb_2021_us_county_500k", verbose = FALSE)
#load map
countymap <- readOGR(dsn="Data/cb_2021_us_county_500k", layer="cb_2021_us_county_500k", verbose=FALSE)
#load map
countymap <- readOGR(dsn="Data/cb_2021_us_county_500k", layer="cb_2021_us_county_500k", verbose=TRUE)
#load map
countymap <- readOGR(dsn="Data/cb_2021_us_county_500k", layer="cb_2021_us_county_500k", verbose=FALSE)
#load map
countymap <- readOGR(dsn="Data/cb_2021_us_county_500k.shp", layer="cb_2021_us_county_500k", verbose=FALSE)
#load map
countymap <- readOGR(dsn="Data/cb_2021_us_county_500k.shp", layer="cb_2021_us_county_500k.shp", verbose=FALSE)
?readOGR
#load map
countymap <- read_sf(dsn="Data/cb_2021_us_county_500k.shp", layer="cb_2021_us_county_500k.shp", verbose=FALSE)
#load map
countymap <- read_sf(dsn="Data/cb_2021_us_county_500k.shp")
#load map
countymap <- read_sf(dsn="Data/cb_2021_us_county_500k/cb_2021_us_county_500k.shp")
#load map
countymap <- read_sf(dsn="Data/cb_2021_us_county_500k.shp")
#load map
countymap <- read_sf(dsn="Data/cb_2021_us_county_500k.shp")
#load map
countymap <- read_sf(dsn="Data/cb_2021_us_county_500k/cb_2021_us_county_500k.shp")
#load map
countymap <- read_sf("Data/cb_2021_us_county_500k/cb_2021_us_county_500k.shp")
#load map
countymap <- read_sf("Data/cb_2021_us_county_500k.shp")
#load libraries
library(tidyverse)
library(dplyr)
library(ggmap)
library(maps)
library(sf)
library(geojson)
library(geojsonsf)
#load data
finaldata <- read_csv("Data/Finaldatafile.csv")
#explore data
str(finaldata)
#load map
countymap <- read_sf("Data/cb_2021_us_county_500k.shp")
#load map
countymap <- read_sf("Data/cb_2021_us_county_500k/cb_2021_us_county_500k.shp")
#find map
linkMap = "https://github.com/devonlh/Data/blob/main/WA-53-washington-counties.json"
mapWorld = read_sf(linkMap)
#find map
linkMap = "https://raw.githubusercontent.com/devonlh/Data/main/WA-53-washington-counties.json?token=GHSAT0AAAAAAB625Q4NN4KSPNTFW6ELXE6IY7VV6FQ"
mapWorld = read_sf(linkMap)
head(mapWorld)
View(mapWorld)
map_indexes = merge(mapWA, #map first
finaldata,
by='Name')
mapWA = read_sf(linkMap)
head(mapWorld)
map_indexes = merge(mapWA, #map first
finaldata,
by='Name')
View(mapWA)
View(finaldata)
View(mapWA)
View(finaldata)
View(mapWA)
map_indexes = merge(mapWA, #map first
finaldata,
by='CountyFP')
?merge()
head(mapWA)
map_indexes = merge(mapWA, #map first
finaldata,
by='CountyFP')
#load libraries
library(tidyverse)
library(sf)
#load data
data <- read_csv("Data/Finaldatafile.csv")
#explore data
str(data)
finaldata <- subset(data, DemographicCategory == "White")
str(finaldata)
#computing the clusters
res.pam=cluster::pam(x=finaldata$TeacherPct,
k = 3,
cluster.only = F)
#adding column as a factor variable
finaldata$cluster=as.factor(res.pam$clustering)
finaldata$cluster=factor(finaldata$cluster,
levels=c(1,3,2),
labels=c("Low","Mid","High"),
ordered=T)
#load map
linkMap = "https://raw.githubusercontent.com/devonlh/Data/main/WA-53-washington-counties.json"
mapWA = read_sf(linkMap)
head(mapWA)
#merge map & data
map_indexes = merge(mapWA, #map first
finaldata,
by='COUNTYFP')
str(map_indexes)
View(finaldata)
#load data
data <- read_csv("Data/Finaldatafile.csv")
#explore data
str(data)
View(data)
data$COUNTYFP = as.character(data$COUNTYFP)
finaldata <- subset(data, DemographicCategory == "White")
View(finaldata)
#computing the clusters
res.pam=cluster::pam(x=finaldata$TeacherPct,
k = 3,
cluster.only = F)
#adding column as a factor variable
finaldata$cluster=as.factor(res.pam$clustering)
finaldata$cluster=factor(finaldata$cluster,
levels=c(1,3,2),
labels=c("Low","Mid","High"),
ordered=T)
#load map
linkMap = "https://raw.githubusercontent.com/devonlh/Data/main/WA-53-washington-counties.json"
mapWA = read_sf(linkMap)
head(mapWA)
#merge map & data
map_indexes = merge(mapWA, #map first
finaldata,
by='COUNTYFP')
#make Washington base map
baseMap= ggplot(data=mapWA) + theme_classic() +
geom_sf(fill='grey',
color='white') # border color
baseMap
#add demographic data
DemMap= baseMap + geom_sf(data=map_indexes,
aes(fill=TeacherPct), # variable from map_indexes
color=NA)
DemMap
#merge map & data
map_indexes = merge(mapWA, #map first
finaldata,
by='COUNTYFP')
str(map_indexes)
View(mapWA)
View(finaldata)
#format countyFP as character data
data$COUNTYFP = as.character(0+ata$COUNTYFP)
#format countyFP as character data
data$COUNTYFP = as.character(0+data$COUNTYFP)
#format countyFP as character data
data$COUNTYFP = str_interp("0${as.character(data$COUNTYFP)}")
View(data)
data %>% mutate(COUNTYFP = sprintf("%03d", COUNTYFP))
#load data
data <- read_csv("Data/Finaldatafile.csv")
#explore data
str(data)
data %>% mutate(COUNTYFP = sprintf("%03d", COUNTYFP))
View(data)
data %>% mutate(COUNTYFP = sprintf("%03d", COUNTYFP))
zerodata<- data %>% mutate(COUNTYFP = sprintf("%03d", COUNTYFP))
View(zerodata)
View(baseMap)
zerodata<- data %>% mutate(COUNTYFP = sprintf("%02d", COUNTYFP))
#format countyFP as character data
data$COUNTYFP = as.character(data$COUNTYFP)
#load data
data <- read_csv("Data/Finaldatafile.csv")
#explore data
str(data)
zerodata<- data %>% mutate(COUNTYFP = sprintf("%02d", COUNTYFP))
#format countyFP as character data
zerodata$COUNTYFP = as.character(data$COUNTYFP)
#explore data
str(data)
zerodata<- data %>% mutate(COUNTYFP = sprintf("%02d", COUNTYFP))
#load data
data <- read_csv("Data/Finaldatafile.csv")
#explore data
str(data)
zerodata<- data %>% mutate(COUNTYFP = sprintf("%02d", COUNTYFP))
#format countyFP as character data
zerodata$COUNTYFP = as.character(zerodata$COUNTYFP)
View(zerodata)
View(mapWA)
zerodata<- data %>% mutate(COUNTYFP = sprintf("%03d", COUNTYFP))
#format countyFP as character data
zerodata$COUNTYFP = as.character(zerodata$COUNTYFP)
View(zerodata)
View(zerodata)
#subset data
finaldata <- subset(zerodata, DemographicCategory == "White")
str(finaldata)
View(finaldata)
#computing the clusters
res.pam=cluster::pam(x=finaldata$TeacherPct,
k = 3,
cluster.only = F)
#adding column as a factor variable
finaldata$cluster=as.factor(res.pam$clustering)
finaldata$cluster=factor(finaldata$cluster,
levels=c(1,3,2),
labels=c("Low","Mid","High"),
ordered=T)
#load map
linkMap = "https://raw.githubusercontent.com/devonlh/Data/main/WA-53-washington-counties.json"
mapWA = read_sf(linkMap)
head(mapWA)
#merge map & data
map_indexes = merge(mapWA, #map first
finaldata,
by='COUNTYFP')
str(map_indexes)
#make Washington base map
baseMap= ggplot(data=mapWA) + theme_classic() +
geom_sf(fill='grey',
color='white') # border color
baseMap
#add demographic data
DemMap= baseMap + geom_sf(data=map_indexes,
aes(fill=TeacherPct), # variable from map_indexes
color=NA)
DemMap
DemMap + scale_fill_gradient(low = 'red',
high= 'blue')
